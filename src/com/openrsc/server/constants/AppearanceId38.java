package com.openrsc.server.constants;

import java.util.HashMap;
import java.util.Map;

import static com.openrsc.server.constants.AppearanceSlots.*;

public enum AppearanceId38 {
	NOTHING(0, ANY),
	SHORT_HAIR(1, HEAD),
	MALE_BODY(2, SHIRT),
	COLOURED_PANTS(3, PANTS),
	LONG_HAIR(4, HEAD),
	FEMALE_BODY(5, SHIRT),
	SHORT_HAIR_2(6, HEAD),
	LONG_BEARDED_HEAD(7, HEAD),
	BALD_HEAD(8, HEAD),
	CHEFS_HAT(9, HAT),
	WHITE_APRON(10, AMULET),
	BROWN_APRON(11, AMULET),
	LEATHER_BOOTS(12, BOOTS),
	LARGE_BRONZE_HELMET(13, HAT),
	LARGE_IRON_HELMET(14, HAT),
	LARGE_STEEL_HELMET(15, HAT),
	LARGE_MITHRIL_HELMET(16, HAT),
	LARGE_ADAMANTITE_HELMET(17, HAT),
	LARGE_RUNE_HELMET(18, HAT),
	LARGE_BLACK_HELMET(19, HAT),
	LARGE_WHITE_HELMET(20, HAT), // NO ITEM
	BRONZE_CHAIN_MAIL_BODY(21, BODY),
	IRON_CHAIN_MAIL_BODY(22, BODY),
	STEEL_CHAIN_MAIL_BODY(23, BODY),
	MITHRIL_CHAIN_MAIL_BODY(24, BODY),
	ADAMANTITE_CHAIN_MAIL_BODY(25, BODY),
	BRONZE_PLATE_MAIL_BODY(26, BODY),
	IRON_PLATE_MAIL_BODY(27, BODY),
	STEEL_PLATE_MAIL_BODY(28, BODY),
	MITHRIL_PLATE_MAIL_BODY(29, BODY),
	ADAMANTITE_PLATE_MAIL_BODY(30, BODY),
	BLACK_PLATE_MAIL_BODY(31, BODY),
	WHITE_PLATE_MAIL_BODY(32, BODY), // NO ITEM
	BRONZE_PLATE_MAIL_LEGS(33, LEGS),
	IRON_PLATE_MAIL_LEGS(34, LEGS),
	STEEL_PLATE_MAIL_LEGS(35, LEGS),
	MITHRIL_PLATE_MAIL_LEGS(36, LEGS),
	ADAMANTITE_PLATE_MAIL_LEGS(37, LEGS),
	BLACK_PLATE_MAIL_LEGS(38, LEGS),
	WHITE_PLATE_MAIL_LEGS(39, LEGS), // NO ITEM
	LEATHER_ARMOUR(40, BODY),
	LEATHER_GLOVES(41, GLOVES),
	BRONZE_SWORD(42, WEAPON),
	IRON_SWORD(43, WEAPON),
	STEEL_SWORD(44, WEAPON),
	MITHRIL_SWORD(45, WEAPON),
	ADAMANTITE_SWORD(46, WEAPON),
	RUNE_SWORD(47, WEAPON),
	WHITE_APRON_2(48, AMULET),
	RED_CAPE(49, CAPE),
	BLACK_CAPE(50, CAPE),
	BLUE_CAPE(51, CAPE),
	MEDIUM_BRONZE_HELMET(52, HAT),
	MEDIUM_IRON_HELMET(53, HAT),
	MEDIUM_STEEL_HELMET(54, HAT),
	MEDIUM_MITHRIL_HELMET(55, HAT),
	MEDIUM_ADAMANTITE_HELMET(56, HAT),
	WIZARDS_ROBE(57, BODY),
	WIZARDSHAT(58, HAT),
	DARKWIZARDSHAT(59, HAT),
	SILVER_NECKLACE(60, AMULET),
	BLUE_SKIRT(61, LEGS),
	DARKWIZARDS_ROBE(62, BODY),
	SARADOMIN_MONK_ROBE(63, BODY),
	ZAMORAK_MONK_ROBE(64, BODY),
	SARADOMIN_MONK_SKIRT(65, LEGS),
	BLACK_SKIRT(66, LEGS),
	PINK_SKIRT(67, LEGS),
	ZAMORAK_MONK_SKIRT(68, LEGS),
	BRONZE_PLATED_SKIRT(69, LEGS),
	IRON_PLATED_SKIRT(70, LEGS),
	STEEL_PLATED_SKIRT(71, LEGS),
	MITHRIL_PLATED_SKIRT(72, LEGS),
	ADAMANTITE_PLATED_SKIRT(73, LEGS),
	BRONZE_SQUARE_SHIELD(74, SHIELD),
	IRON_SQUARE_SHIELD(75, SHIELD),
	STEEL_SQUARE_SHIELD(76, SHIELD),
	MITHRIL_SQUARE_SHIELD(77, SHIELD),
	ADAMANTITE_SQUARE_SHIELD(78, SHIELD),
	WOODEN_SHIELD(79, SHIELD),
	CROSSBOW(80, WEAPON),
	LONGBOW(81, WEAPON),
	BRONZE_BATTLEAXE(82, WEAPON),
	IRON_BATTLEAXE(83, WEAPON),
	STEEL_BATTLEAXE(84, WEAPON),
	MITHRIL_BATTLEAXE(85, WEAPON),
	ADAMANTITE_BATTLEAXE(86, WEAPON),
	RUNED_BATTLEAXE(87, WEAPON),
	BRONZE_MACE(88, WEAPON),
	IRON_MACE(89, WEAPON),
	STEEL_MACE(90, WEAPON),
	MITHRIL_MACE(91, WEAPON),
	ADAMANTITE_MACE(92, WEAPON),
	RUNED_MACE(93, WEAPON),
	STAFF(94, WEAPON),
	RAT(95, NPC),
	DEMON(96, NPC),
	SPIDER(97, NPC),
	RED_SPIDER(98, NPC),
	CAMEL(99, NPC),
	COW(100, NPC),
	SHEEP(101, NPC),
	UNICORN(102, NPC),
	BEAR(103, NPC),
	CHICKEN(104, NPC),
	SKELETON(105, NPC),
	SKELETON_SCIMITAR_AND_SHIELD(106, WEAPON), // NO ITEM
	ZOMBIE(107, NPC),
	ZOMBIE_AXE(108, WEAPON), // NO ITEM
	GHOST(109, NPC),
	BAT(110, NPC),
	GOBLIN(111, NPC),
	GOBLIN_WITH_RED_ARMOUR(112, NPC),
	GOBLIN_WITH_GREEN_ARMOUR(113, NPC),
	GOBLIN_SPEAR(114, WEAPON), // NO ITEM
	SCORPION(115, NPC);


	private int appearanceId;
	private int wieldPosition;

	private static final Map<Integer, AppearanceId38> byId = new HashMap<>();

	static {
		for (AppearanceId38 appearance : AppearanceId38.values()) {
			if (byId.put(appearance.id(), appearance) != null) {
				throw new IllegalArgumentException("duplicate id: " + appearance.id());
			}
		}
	}

	public static AppearanceId38 getById(Integer id) {
		return byId.getOrDefault(id, AppearanceId38.NOTHING);
	}

	/**
	 * @param appearanceId The ID of the animation.
	 */
	AppearanceId38(int appearanceId, int wieldPosition) {
		this.appearanceId = appearanceId;
		this.wieldPosition = wieldPosition;
	}

	/**
	 * @return The animations ID
	 */
	public int id() {
		return appearanceId;
	}

	public int getSuggestedWieldPosition() {
		return wieldPosition;
	}
}
